// Package skysql provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package skysql

const (
	HTTPBearerScopes = "HTTPBearer.Scopes"
)

// IP Address that has been added to the services network allowlist
type AllowlistIPAddress struct {
	Comment   *string `json:"comment,omitempty"`
	Database  string  `json:"database"`
	IpAddress string  `json:"ip_address"`
}

// GET Configuration Response
type ConfigurationResp struct {
	Id                    string                      `json:"_id"`
	ConfigurationVersions *[]ConfigurationVersionResp `json:"configuration_versions,omitempty"`
	Name                  string                      `json:"name"`
	Number                string                      `json:"number"`
	Public                string                      `json:"public"`
	Topology              string                      `json:"topology"`
}

// GET Configuration Response nested configuration version
type ConfigurationVersionResp struct {
	ConfigJson     map[string]interface{} `json:"config_json"`
	CurrentVersion string                 `json:"current_version"`
	Version        string                 `json:"version"`
}

// Request body to create a new MariaDB Configuration
type CreateConfigurationRequest struct {
	ConfigJson *map[string]interface{} `json:"config_json,omitempty"`
	Name       string                  `json:"name"`
	Topology   string                  `json:"topology"`
}

// Update Configuration Response
type CreateConfigurationResp struct {
	Id string `json:"_id"`

	// GET Configuration Response nested configuration version
	ConfigurationVersion ConfigurationVersionResp `json:"configuration_version"`
	Name                 string                   `json:"name"`
	Number               string                   `json:"number"`
	Public               string                   `json:"public"`
	Topology             string                   `json:"topology"`
}

// HTTPValidationError defines model for HTTPValidationError.
type HTTPValidationError struct {
	Detail *[]ValidationError `json:"detail,omitempty"`
}

// IP Address representation in SkySQL
type IPAddress struct {
	Comment   *string `json:"comment,omitempty"`
	IpAddress string  `json:"ip_address"`
}

// Generic message body containing error details for failed requests
type Message struct {
	Details string `json:"details"`
}

// Request body to create a new MariaDB services deployed by SkySQL
type NewService struct {
	MaxscaleConfig *string `json:"maxscale_config,omitempty"`
	MaxscaleProxy  *string `json:"maxscale_proxy,omitempty"`
	Monitor        *string `json:"monitor,omitempty"`
	Name           string  `json:"name"`
	Provider       string  `json:"provider"`
	Region         string  `json:"region"`
	ReleaseVersion string  `json:"release_version"`
	ReplRegion     *string `json:"repl_region,omitempty"`
	Replicas       string  `json:"replicas"`
	Size           string  `json:"size"`
	Tier           string  `json:"tier"`
	Topology       string  `json:"topology"`
	TxStorage      string  `json:"tx_storage"`
	VolumeIops     *string `json:"volume_iops,omitempty"`
	VolumeType     *string `json:"volume_type,omitempty"`
}

// A database product, e.g. Xpand
type Product struct {
	Id               *string `json:"_id,omitempty"`
	Active           *string `json:"active,omitempty"`
	ActiveTopologies *string `json:"active_topologies,omitempty"`
	CreatedBy        *string `json:"created_by,omitempty"`
	CreatedOn        *string `json:"created_on,omitempty"`
	DefaultTopology  *string `json:"default_topology,omitempty"`
	Description      *string `json:"description,omitempty"`
	DisplayName      *string `json:"display_name,omitempty"`
	ModCount         *string `json:"mod_count,omitempty"`
	Name             string  `json:"name"`
	Order            *string `json:"order,omitempty"`
	ShortDescription *string `json:"short_description,omitempty"`
	Tags             string  `json:"tags"`
	UpdatedBy        *string `json:"updated_by,omitempty"`
	UpdatedOn        *string `json:"updated_on,omitempty"`
}

// Cloud provider, e.g. AWS or GCP
type Provider struct {
	Id         *string `json:"_id,omitempty"`
	Active     *string `json:"active,omitempty"`
	CreatedBy  *string `json:"created_by,omitempty"`
	CreatedOn  *string `json:"created_on,omitempty"`
	IconImage  *string `json:"icon_image,omitempty"`
	LogoImage  *string `json:"logo_image,omitempty"`
	ModCount   *string `json:"mod_count,omitempty"`
	Name       string  `json:"name"`
	Products   *string `json:"products,omitempty"`
	Tags       string  `json:"tags"`
	Topologies *string `json:"topologies,omitempty"`
	UpdatedBy  *string `json:"updated_by,omitempty"`
	UpdatedOn  string  `json:"updated_on"`
	Value      string  `json:"value"`
}

// A quota progress response
type QuotaProgress struct {
	Description *string `json:"description,omitempty"`
	Limit       int     `json:"limit"`
	Name        string  `json:"name"`
	Provider    *string `json:"provider,omitempty"`
	Region      *string `json:"region,omitempty"`
	Remaining   *int    `json:"remaining,omitempty"`
	Used        *int    `json:"used,omitempty"`
}

// Geographic region, as defined by the providers
type Region struct {
	Id        *string `json:"_id,omitempty"`
	Active    *string `json:"active,omitempty"`
	ApiHandle *string `json:"api_handle,omitempty"`
	CreatedBy *string `json:"created_by,omitempty"`
	CreatedOn *string `json:"created_on,omitempty"`
	Default   *string `json:"default,omitempty"`
	Location  string  `json:"location"`
	ModCount  *string `json:"mod_count,omitempty"`
	Name      string  `json:"name"`
	NodeType  *string `json:"node_type,omitempty"`
	Provider  string  `json:"provider"`
	Region    string  `json:"region"`
	Tags      string  `json:"tags"`
	UpdatedBy *string `json:"updated_by,omitempty"`
	UpdatedOn *string `json:"updated_on,omitempty"`
}

// MariaDB services deployed by SkySQL
type Service struct {
	Id                *string `json:"_id,omitempty"`
	ActiveReplicas    *string `json:"active_replicas,omitempty"`
	Attributes        *string `json:"attributes,omitempty"`
	BulkdataPort1     *string `json:"bulkdata_port_1,omitempty"`
	BulkdataPort2     *string `json:"bulkdata_port_2,omitempty"`
	Cluster           *string `json:"cluster,omitempty"`
	ColumnstoreBucket *string `json:"columnstore_bucket,omitempty"`
	CreatedBy         *string `json:"created_by,omitempty"`
	CreatedOn         *string `json:"created_on,omitempty"`
	CustomConfig      *string `json:"custom_config,omitempty"`
	DnsDomain         *string `json:"dns_domain,omitempty"`
	FaultCount        *string `json:"fault_count,omitempty"`
	Fqdn              *string `json:"fqdn,omitempty"`
	GlAccount         *string `json:"gl_account,omitempty"`
	Id                *string `json:"id,omitempty"`
	InstallStatus     string  `json:"install_status"`
	InstanceState     *string `json:"instance_state,omitempty"`
	IpAddress         *string `json:"ip_address,omitempty"`
	MacAddress        *string `json:"mac_address,omitempty"`
	MaxscaleConfig    *string `json:"maxscale_config,omitempty"`
	MaxscaleProxy     *string `json:"maxscale_proxy,omitempty"`
	ModCount          *string `json:"mod_count,omitempty"`
	Monitor           *string `json:"monitor,omitempty"`
	Name              *string `json:"name,omitempty"`
	Number            *string `json:"number,omitempty"`
	OperationalStatus string  `json:"operational_status"`
	OwnedBy           *string `json:"owned_by,omitempty"`
	Provider          string  `json:"provider"`
	Proxy             *string `json:"proxy,omitempty"`
	ReadOnlyPort      *string `json:"read_only_port,omitempty"`
	ReadWritePort     *string `json:"read_write_port,omitempty"`
	Region            string  `json:"region"`
	ReleaseVersion    *string `json:"release_version,omitempty"`
	ReplMaster        *string `json:"repl_master,omitempty"`
	ReplMasterHostExt *string `json:"repl_master_host_ext,omitempty"`
	ReplRegion        *string `json:"repl_region,omitempty"`
	Replicas          *string `json:"replicas,omitempty"`
	ReplicationStatus *string `json:"replication_status,omitempty"`
	ReplicationType   *string `json:"replication_type,omitempty"`
	Size              string  `json:"size"`
	SkipSync          *string `json:"skip_sync,omitempty"`
	SslCertificate    *string `json:"ssl_certificate,omitempty"`
	SslExpiresOn      *string `json:"ssl_expires_on,omitempty"`
	SslSerial         *string `json:"ssl_serial,omitempty"`
	Tier              *string `json:"tier,omitempty"`
	Topology          string  `json:"topology"`
	TxStorage         string  `json:"tx_storage"`
	UpdatedBy         *string `json:"updated_by,omitempty"`
	UpdatedOn         *string `json:"updated_on,omitempty"`
	VolumeIops        *string `json:"volume_iops,omitempty"`
	VolumeType        *string `json:"volume_type,omitempty"`
}

// Actions that can be taken on a services in a Task
type ServiceActions interface{}

// Response body for a services status
type ServiceStatus struct {
	Status string `json:"status"`
}

// Request body to update a service
type ServiceStatusUpdate struct {
	// Actions that can be taken on a services in a Task
	Action ServiceActions `json:"action"`
}

// Request body to update a services - currently limited to name only
type ServiceUpdate struct {
	Name string `json:"name"`
}

// Node size, as defined by the providers
type Size struct {
	Id         *string `json:"_id,omitempty"`
	Active     *string `json:"active,omitempty"`
	ApiHandle  *string `json:"api_handle,omitempty"`
	Component  string  `json:"component"`
	Cpu        *string `json:"cpu,omitempty"`
	CreatedBy  *string `json:"created_by,omitempty"`
	CreatedOn  *string `json:"created_on,omitempty"`
	ModCount   *string `json:"mod_count,omitempty"`
	Name       string  `json:"name"`
	NodePool   string  `json:"node_pool"`
	Product    string  `json:"product"`
	Provider   string  `json:"provider"`
	Ram        *string `json:"ram,omitempty"`
	Sequence   *string `json:"sequence,omitempty"`
	Tags       *string `json:"tags,omitempty"`
	Tier       string  `json:"tier"`
	UpdatedBy  *string `json:"updated_by,omitempty"`
	UpdatedOn  *string `json:"updated_on,omitempty"`
	Value      string  `json:"value"`
	Visibility string  `json:"visibility"`
}

// Availability tier, e.g. dedicated or shared tenancy
type Tier struct {
	Id        *string `json:"_id,omitempty"`
	Active    *string `json:"active,omitempty"`
	CreatedBy *string `json:"created_by,omitempty"`
	CreatedOn *string `json:"created_on,omitempty"`
	ModCount  *string `json:"mod_count,omitempty"`
	Name      *string `json:"name,omitempty"`
	Paid      *string `json:"paid,omitempty"`
	Tags      *string `json:"tags,omitempty"`
	UpdatedBy *string `json:"updated_by,omitempty"`
	UpdatedOn *string `json:"updated_on,omitempty"`
}

// Cluster topology valid for a particular product, e.g. Standalone or MaxScale
type Topology struct {
	Id                     *string `json:"_id,omitempty"`
	Active                 *string `json:"active,omitempty"`
	ApiHandle              *string `json:"api_handle,omitempty"`
	CreatedBy              *string `json:"created_by,omitempty"`
	CreatedOn              *string `json:"created_on,omitempty"`
	DisplayName            *string `json:"display_name,omitempty"`
	HasClustrixFrontend    *string `json:"has_clustrix_frontend,omitempty"`
	HasReplicas            *string `json:"has_replicas,omitempty"`
	MariadbCronbackEnabled *string `json:"mariadb_cronback_enabled,omitempty"`
	MaxscaleSupported      *string `json:"maxscale_supported,omitempty"`
	ModCount               *string `json:"mod_count,omitempty"`
	Name                   string  `json:"name"`
	OperatorReplicaMinimum *string `json:"operator_replica_minimum,omitempty"`
	Paid                   *string `json:"paid,omitempty"`
	Product                string  `json:"product"`
	ReplicaLabel           *string `json:"replica_label,omitempty"`
	ReplicaOptions         *string `json:"replica_options,omitempty"`
	Tags                   *string `json:"tags,omitempty"`
	UpdatedBy              *string `json:"updated_by,omitempty"`
	UpdatedOn              *string `json:"updated_on,omitempty"`
	Value                  string  `json:"value"`
}

// Request body to update a configuration
type UpdateConfigurationRequest struct {
	ConfigJson *map[string]interface{} `json:"config_json,omitempty"`
	Name       *string                 `json:"name,omitempty"`
}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	Loc  []string `json:"loc"`
	Msg  string   `json:"msg"`
	Type string   `json:"type"`
}

// Database version, e.g. 10.4 or 10.5
type Version struct {
	Id                *string `json:"_id,omitempty"`
	CreatedBy         *string `json:"created_by,omitempty"`
	CreatedOn         *string `json:"created_on,omitempty"`
	DisplayName       *string `json:"display_name,omitempty"`
	EnterpriseVersion *string `json:"enterprise_version,omitempty"`
	ModCount          *string `json:"mod_count,omitempty"`
	Name              *string `json:"name,omitempty"`
	ParentRelease     *string `json:"parent_release,omitempty"`
	Product           *string `json:"product,omitempty"`
	Provider          *string `json:"provider,omitempty"`
	Public            *string `json:"public,omitempty"`
	ReleaseDate       *string `json:"release_date,omitempty"`
	ReleaseNotesUrl   *string `json:"release_notes_url,omitempty"`
	Tags              *string `json:"tags,omitempty"`
	Type              *string `json:"type,omitempty"`
	UpdatedBy         *string `json:"updated_by,omitempty"`
	UpdatedOn         *string `json:"updated_on,omitempty"`
}

// ListConfigurationsParams defines parameters for ListConfigurations.
type ListConfigurationsParams struct {
	Limit *int `json:"limit,omitempty"`
}

// CreateConfigurationJSONBody defines parameters for CreateConfiguration.
type CreateConfigurationJSONBody CreateConfigurationRequest

// UpdateConfigurationJSONBody defines parameters for UpdateConfiguration.
type UpdateConfigurationJSONBody UpdateConfigurationRequest

// ReadProductsParams defines parameters for ReadProducts.
type ReadProductsParams struct {
	Limit *int `json:"limit,omitempty"`
}

// ReadProvidersParams defines parameters for ReadProviders.
type ReadProvidersParams struct {
	Limit *int `json:"limit,omitempty"`
}

// ReadRegionsParams defines parameters for ReadRegions.
type ReadRegionsParams struct {
	Provider string `json:"provider"`
	Limit    *int   `json:"limit,omitempty"`
}

// ReadSizesParams defines parameters for ReadSizes.
type ReadSizesParams struct {
	Product  string `json:"product"`
	Provider string `json:"provider"`
	Tier     string `json:"tier"`
	Limit    *int   `json:"limit,omitempty"`
}

// ReadTiersParams defines parameters for ReadTiers.
type ReadTiersParams struct {
	Limit *int `json:"limit,omitempty"`
}

// ReadTopologiesParams defines parameters for ReadTopologies.
type ReadTopologiesParams struct {
	Product string `json:"product"`
	Limit   *int   `json:"limit,omitempty"`
}

// ReadVersionsParams defines parameters for ReadVersions.
type ReadVersionsParams struct {
	Limit *int `json:"limit,omitempty"`
}

// ListServicesParams defines parameters for ListServices.
type ListServicesParams struct {
	Limit *int `json:"limit,omitempty"`
}

// CreateServiceJSONBody defines parameters for CreateService.
type CreateServiceJSONBody NewService

// UpdateServiceJSONBody defines parameters for UpdateService.
type UpdateServiceJSONBody ServiceUpdate

// RemoveAllowedAddressParams defines parameters for RemoveAllowedAddress.
type RemoveAllowedAddressParams struct {
	Address *string `json:"address,omitempty"`
}

// ListAllowedAddressesParams defines parameters for ListAllowedAddresses.
type ListAllowedAddressesParams struct {
	Limit  *int `json:"limit,omitempty"`
	Offset *int `json:"offset,omitempty"`
}

// AddAllowedAddressJSONBody defines parameters for AddAllowedAddress.
type AddAllowedAddressJSONBody IPAddress

// UpdateStatusJSONBody defines parameters for UpdateStatus.
type UpdateStatusJSONBody ServiceStatusUpdate

// CreateConfigurationJSONRequestBody defines body for CreateConfiguration for application/json ContentType.
type CreateConfigurationJSONRequestBody CreateConfigurationJSONBody

// UpdateConfigurationJSONRequestBody defines body for UpdateConfiguration for application/json ContentType.
type UpdateConfigurationJSONRequestBody UpdateConfigurationJSONBody

// CreateServiceJSONRequestBody defines body for CreateService for application/json ContentType.
type CreateServiceJSONRequestBody CreateServiceJSONBody

// UpdateServiceJSONRequestBody defines body for UpdateService for application/json ContentType.
type UpdateServiceJSONRequestBody UpdateServiceJSONBody

// AddAllowedAddressJSONRequestBody defines body for AddAllowedAddress for application/json ContentType.
type AddAllowedAddressJSONRequestBody AddAllowedAddressJSONBody

// UpdateStatusJSONRequestBody defines body for UpdateStatus for application/json ContentType.
type UpdateStatusJSONRequestBody UpdateStatusJSONBody

