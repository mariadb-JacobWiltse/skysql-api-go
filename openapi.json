{
  "openapi": "3.0.2",
  "info": {
    "title": "MariaDB SkySQL API",
    "description": "The below documentation describes the API for MariaDB SkySQL, which can be used directly with any HTTP client (e.g. curl, Postman, language specific clients, etc.).\n\n### Authentication\nTo authenticate with the API, do the following:\n\n- Generate an [API key from MariaDB ID](https://id-dev.mariadb.com/account/api)\n\n- Use the API key to generate a short lived token\n    ```\n    curl \\\n        --location \\\n        --request POST \\\n        --header \"Authorization: Token REDACTED\" \\\n        --header \"Content-length: 0\" \\\n        'https://id-dev.mariadb.com/api/v1/token/'\n    ```\n\n- Use the `token` field from the response in the _Authorization_ header for `Bearer` auth in subsequent api requests.\n\n\n### Clients\nClients have been developed to simplify the usage of this API:\n* Command line tool: [`skysqlcli`](https://github.com/mariadb-corporation/skysql-api-cli)\n* Golang SDK: [`skysql-api-go`](https://github.com/mariadb-corporation/skysql-api-go)\n* Terraform provider: [`terraform-provider-skysql`](https://github.com/mariadb-corporation/terraform-provider-skysql)\n\nThese clients handle the token retrieval step automatically, and only need to be supplied with the API key.\n\n\n\n\n\n**Note:** The example values provided below, if used, may not return a success response.",
    "version": "0.0.70"
  },
  "paths": {
    "/billing/quotas": {
      "get": {
        "tags": [
          "Billing"
        ],
        "summary": "Read Quotas",
        "description": "Retrieve the list of quota limitations currently in force for the user, as well\nas their progress towards those quotas",
        "operationId": "read_quotas",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Read Quotas Billing Quotas Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QuotaProgress"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/configurations/": {
      "get": {
        "tags": [
          "Configurations"
        ],
        "summary": "List Configurations",
        "description": "Retrieve a list of configurations owned by the current user",
        "operationId": "list_configurations",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Configurations Configurations  Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConfigurationResponseBaseModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Configurations"
        ],
        "summary": "Create Configuration",
        "description": "Launch a new configuration cluster for the current user",
        "operationId": "create_configuration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConfigurationRequest"
              },
              "examples": {
                "timeout": {
                  "summary": "Interactive Timeout",
                  "description": "Example configuration demonstrating how to tweak database parameters",
                  "value": {
                    "name": "interactive-timeout",
                    "topology": "Standalone",
                    "config_json": {
                      "variables": {
                        "interactive_timeout": {
                          "type": "number",
                          "value": "300",
                          "requires_restart": true,
                          "regex": ""
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateConfigurationResp"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/configurations/{configuration_number}": {
      "get": {
        "tags": [
          "Configurations"
        ],
        "summary": "Read Configuration",
        "description": "Retrieve status and metadata for the specified configuration",
        "operationId": "read_configuration",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Configuration Number",
              "type": "string"
            },
            "examples": {
              "number": {
                "summary": "Number",
                "description": "The identifier for a custom configuration",
                "value": "CFG0000000"
              }
            },
            "name": "configuration_number",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationResp"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Configurations"
        ],
        "summary": "Delete Configuration",
        "description": "Delete the specified configuration and its associated data",
        "operationId": "delete_configuration",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Configuration Number",
              "type": "string"
            },
            "examples": {
              "number": {
                "summary": "Number",
                "description": "The identifier for a custom configuration",
                "value": "CFG0000000"
              }
            },
            "name": "configuration_number",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Configurations"
        ],
        "summary": "Update Configuration",
        "description": "Update an existing configuration cluster, (e.g. provision more IOPS, change node type)",
        "operationId": "update_configuration",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Configuration Number",
              "type": "string"
            },
            "examples": {
              "number": {
                "summary": "Number",
                "description": "The identifier for a custom configuration",
                "value": "CFG0000000"
              }
            },
            "name": "configuration_number",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateConfigurationRequest"
              },
              "examples": {
                "timeout": {
                  "summary": "Interactive Timeout",
                  "description": "Example configuration demonstrating how to update an existing config",
                  "value": {
                    "name": "interactive-timeout",
                    "config_json": {
                      "variables": {
                        "interactive_timeout": {
                          "type": "number",
                          "value": "150",
                          "requires_restart": true,
                          "regex": ""
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationResp"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/services/": {
      "get": {
        "tags": [
          "Services"
        ],
        "summary": "List Services",
        "description": "Retrieve a list of services owned by the current user",
        "operationId": "list_services",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Services Services  Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceOut"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Services"
        ],
        "summary": "Create Service",
        "description": "Launch a new service for the current user",
        "operationId": "create_service",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceIn"
              },
              "examples": {
                "standalone": {
                  "summary": "Standalone",
                  "description": "Create a new service using a standalone topology",
                  "value": {
                    "name": "standalone-example",
                    "maxscale_config": "",
                    "maxscale_proxy": "false",
                    "monitor": "false",
                    "provider": "Amazon AWS",
                    "region": "ca-central-1",
                    "release_version": "MariaDB Enterprise Server 10.6.4-1",
                    "repl_region": "",
                    "replicas": "0",
                    "size": "Sky-2x4",
                    "tier": "Power",
                    "topology": "Standalone",
                    "tx_storage": "100",
                    "volume_iops": "100",
                    "volume_type": "io1",
                    "ssl_tls": "Enabled"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceOut"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnmetExpectationDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/services/{service_id}": {
      "get": {
        "tags": [
          "Services"
        ],
        "summary": "Read Service",
        "description": "Retrieve status and metadata for the specified service",
        "operationId": "read_service",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Service Id",
              "type": "string"
            },
            "examples": {
              "id": {
                "summary": "ID",
                "description": "Identifier for a service",
                "value": "db00000000"
              }
            },
            "name": "service_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Services"
        ],
        "summary": "Delete Service",
        "description": "Delete the specified service and its associated data",
        "operationId": "delete_service",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Service Id",
              "type": "string"
            },
            "examples": {
              "id": {
                "summary": "ID",
                "description": "Identifier for a service",
                "value": "db00000000"
              }
            },
            "name": "service_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Services"
        ],
        "summary": "Update Service",
        "description": "Update an existing service name",
        "operationId": "update_service",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Service Id",
              "type": "string"
            },
            "examples": {
              "id": {
                "summary": "ID",
                "description": "Identifier for a service",
                "value": "db00000000"
              }
            },
            "name": "service_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceUpdate"
              },
              "examples": {
                "rename": {
                  "summary": "Rename service",
                  "description": "Change the name of a services",
                  "value": {
                    "name": "new-custom-name"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceOut"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/services/{service_id}/allowlist/": {
      "get": {
        "tags": [
          "Services · Allowlist"
        ],
        "summary": "List Allowed Addresses",
        "description": "Retrieve a list of IP addresses which are currently on the allowlist for accessing\nthe service and its monitoring system",
        "operationId": "list_allowed_addresses",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Service Id",
              "type": "string"
            },
            "name": "service_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Allowed Addresses Services  Service Id  Allowlist  Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AllowlistIPAddress"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Services · Allowlist"
        ],
        "summary": "Add Allowed Address",
        "description": "Add an address to the service’s allowlist",
        "operationId": "add_allowed_address",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Service Id",
              "type": "string"
            },
            "name": "service_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IPAddress"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Services · Allowlist"
        ],
        "summary": "Remove Allowed Address",
        "description": "Remove an address from the service’s allowlist",
        "operationId": "remove_allowed_address",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Service Id",
              "type": "string"
            },
            "name": "service_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Address",
              "pattern": "(?:\\d{1,3}\\.){3}\\d{1,3}(?:/\\d\\d?)?",
              "type": "string"
            },
            "name": "address",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/services/{service_id}/status/": {
      "get": {
        "tags": [
          "Services · Status"
        ],
        "summary": "Read Status",
        "description": "Retrieve the current running status of a service (e.g. Running, Paused, Pending, …)",
        "operationId": "read_status",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Service Id",
              "type": "string"
            },
            "name": "service_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Services · Status"
        ],
        "summary": "Update Status",
        "description": "Alter the state of a service, (e.g. Start, Stop)",
        "operationId": "update_status",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Service Id",
              "type": "string"
            },
            "name": "service_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceStatusUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/offering/products": {
      "get": {
        "tags": [
          "Offering"
        ],
        "summary": "Read Products",
        "description": "Retrieve a list of available database products to choose from (e.g.\nTransactional, Analytical, Xpand, …)",
        "operationId": "read_products",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Read Products Offering Products Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/offering/providers": {
      "get": {
        "tags": [
          "Offering"
        ],
        "summary": "Read Providers",
        "description": "Retrieve a list of available cloud providers in which to host the\ndatabase (e.g. AWS, GCP, …)",
        "operationId": "read_providers",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Read Providers Offering Providers Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Provider"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/offering/regions": {
      "get": {
        "tags": [
          "Offering"
        ],
        "summary": "Read Regions",
        "description": "Retrieve a list of available geographic regions into which a database cluster\nmay be deployed (e.g. us-east-2, eu-central-1, …)",
        "operationId": "read_regions",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Provider",
              "type": "string"
            },
            "examples": {
              "amazon": {
                "summary": "AWS",
                "description": "Amazon Web Services",
                "value": "Amazon AWS"
              },
              "gcp": {
                "summary": "GCP",
                "description": "Google Cloud Platform",
                "value": "Google Cloud"
              }
            },
            "name": "provider",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Read Regions Offering Regions Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Region"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/offering/sizes": {
      "get": {
        "tags": [
          "Offering"
        ],
        "summary": "Read Sizes",
        "description": "Retrieve a list of available node sizes that may be used for the database cluster",
        "operationId": "read_sizes",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Product",
              "type": "string"
            },
            "examples": {
              "transactions": {
                "summary": "Transactions",
                "description": "Deploy a cloud database for transaction processing with persistent storage,\nreplication, read load balancing and read/write splitting all configured\nout of the box and ready to go.",
                "value": "Transactions"
              },
              "analytics": {
                "summary": "Analytics",
                "description": "Deploy a cloud data warehouse for ad hoc, interactive analytics on billions of rows\nwith data stored in a columnar format on low-cost object storage and massively\nparallel processing architecture.",
                "value": "Analytics"
              }
            },
            "name": "product",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "Provider",
              "type": "string"
            },
            "examples": {
              "amazon": {
                "summary": "AWS",
                "description": "Amazon Web Services",
                "value": "Amazon AWS"
              },
              "gcp": {
                "summary": "GCP",
                "description": "Google Cloud Platform",
                "value": "Google Cloud"
              }
            },
            "name": "provider",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "Tier",
              "type": "string"
            },
            "examples": {
              "foundation": {
                "summary": "Foundation",
                "description": "Query for resources available in the foundation tier.",
                "value": "Foundation"
              },
              "power": {
                "summary": "Power",
                "description": "Query for resources available in the power tier.",
                "value": "Power"
              }
            },
            "name": "tier",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Read Sizes Offering Sizes Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Size"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/offering/tiers": {
      "get": {
        "tags": [
          "Offering"
        ],
        "summary": "Read Tiers",
        "description": "Retrieve a list of available tiers in which a service may be created\n(e.g. Power, Foundation, …)",
        "operationId": "read_tiers",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Read Tiers Offering Tiers Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TierResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/offering/topologies": {
      "get": {
        "tags": [
          "Offering"
        ],
        "summary": "Read Topologies",
        "description": "Retrieve a list of valid topologies for a specified product which may be deployed\n(e.g. Transactional + MaxScale, Analytical-Standalone + ColumnStore Single Node)",
        "operationId": "read_topologies",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Product",
              "enum": [
                "Transactions",
                "Analytics"
              ],
              "type": "string"
            },
            "examples": {
              "transactions": {
                "summary": "Transactions",
                "description": "Deploy a cloud database for transaction processing with persistent storage,\nreplication, read load balancing and read/write splitting all configured\nout of the box and ready to go.",
                "value": "Transactions"
              },
              "analytics": {
                "summary": "Analytics",
                "description": "Deploy a cloud data warehouse for ad hoc, interactive analytics on billions of rows\nwith data stored in a columnar format on low-cost object storage and massively\nparallel processing architecture.",
                "value": "Analytics"
              }
            },
            "name": "product",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Read Topologies Offering Topologies Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TopologyResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/offering/versions": {
      "get": {
        "tags": [
          "Offering"
        ],
        "summary": "Read Versions",
        "description": "Retrieve a list of valid database versions which may be chosen for database\ndeployment (e.g. 10.4, 10.5, …)",
        "operationId": "read_versions",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Read Versions Offering Versions Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Version"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/": {
      "get": {
        "tags": [
          "Documentation"
        ],
        "summary": "Redirect To Documentation",
        "description": "Redirect the user to the docs if they hit the root path",
        "operationId": "redirect_to_documentation",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AllowlistIPAddress": {
        "title": "AllowlistIPAddress",
        "required": [
          "ip_address",
          "database"
        ],
        "type": "object",
        "properties": {
          "comment": {
            "title": "Comment",
            "type": "string"
          },
          "ip_address": {
            "title": "Ip Address",
            "type": "string"
          },
          "database": {
            "title": "Database",
            "minLength": 1,
            "type": "string"
          }
        },
        "description": "IP Address that has been added to the services network allowlist"
      },
      "ConfigurationResp": {
        "title": "ConfigurationResp",
        "required": [
          "name",
          "public",
          "topology",
          "number"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "public": {
            "title": "Public",
            "type": "string"
          },
          "topology": {
            "title": "Topology",
            "type": "string"
          },
          "number": {
            "title": "Number",
            "type": "string"
          },
          "configuration_versions": {
            "title": "Configuration Versions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfigurationVersionResp"
            }
          }
        },
        "description": "GET Configuration Response"
      },
      "ConfigurationResponseBaseModel": {
        "title": "ConfigurationResponseBaseModel",
        "required": [
          "name",
          "public",
          "topology",
          "number"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "public": {
            "title": "Public",
            "type": "string"
          },
          "topology": {
            "title": "Topology",
            "type": "string"
          },
          "number": {
            "title": "Number",
            "type": "string"
          }
        },
        "description": "Configuration Response Base Model"
      },
      "ConfigurationVersionResp": {
        "title": "ConfigurationVersionResp",
        "required": [
          "config_json",
          "current_version",
          "version"
        ],
        "type": "object",
        "properties": {
          "config_json": {
            "title": "Config Json",
            "type": "object"
          },
          "current_version": {
            "title": "Current Version",
            "type": "string"
          },
          "version": {
            "title": "Version",
            "type": "string"
          }
        },
        "description": "GET Configuration Response nested configuration version"
      },
      "CreateConfigurationRequest": {
        "title": "CreateConfigurationRequest",
        "required": [
          "name",
          "topology"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "topology": {
            "title": "Topology",
            "type": "string"
          },
          "config_json": {
            "title": "Config Json",
            "type": "object",
            "default": {}
          }
        },
        "description": "Request body to create a new MariaDB Configuration"
      },
      "CreateConfigurationResp": {
        "title": "CreateConfigurationResp",
        "required": [
          "name",
          "public",
          "topology",
          "number",
          "configuration_version"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "public": {
            "title": "Public",
            "type": "string"
          },
          "topology": {
            "title": "Topology",
            "type": "string"
          },
          "number": {
            "title": "Number",
            "type": "string"
          },
          "configuration_version": {
            "$ref": "#/components/schemas/ConfigurationVersionResp"
          }
        },
        "description": "Update Configuration Response"
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "IPAddress": {
        "title": "IPAddress",
        "required": [
          "ip_address"
        ],
        "type": "object",
        "properties": {
          "comment": {
            "title": "Comment",
            "type": "string"
          },
          "ip_address": {
            "title": "Ip Address",
            "type": "string"
          }
        },
        "description": "IP Address representation in SkySQL"
      },
      "Message": {
        "title": "Message",
        "required": [
          "detail"
        ],
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "string"
          }
        },
        "description": "Generic message body containing error details for failed requests"
      },
      "Product": {
        "title": "Product",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "short_description": {
            "title": "Short Description",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "updated_on": {
            "title": "Updated On",
            "type": "string"
          },
          "created_on": {
            "title": "Created On",
            "type": "string"
          },
          "display_name": {
            "title": "Display Name",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "active": {
            "title": "Active",
            "type": "string"
          },
          "order": {
            "title": "Order",
            "type": "string"
          },
          "mod_count": {
            "title": "Mod Count",
            "type": "string"
          },
          "active_topologies": {
            "title": "Active Topologies",
            "type": "string"
          },
          "default_topology": {
            "title": "Default Topology",
            "type": "string"
          }
        },
        "description": "A database product, e.g. Xpand"
      },
      "Provider": {
        "title": "Provider",
        "required": [
          "updated_on",
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "icon_image": {
            "title": "Icon Image",
            "type": "string"
          },
          "mod_count": {
            "title": "Mod Count",
            "type": "string"
          },
          "active": {
            "title": "Active",
            "type": "string"
          },
          "updated_on": {
            "title": "Updated On",
            "type": "string"
          },
          "logo_image": {
            "title": "Logo Image",
            "type": "string"
          },
          "products": {
            "title": "Products",
            "type": "string"
          },
          "topologies": {
            "title": "Topologies",
            "type": "string"
          },
          "created_on": {
            "title": "Created On",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "value": {
            "title": "Value",
            "type": "string"
          }
        },
        "description": "Cloud provider, e.g. AWS or GCP"
      },
      "QuotaProgress": {
        "title": "QuotaProgress",
        "required": [
          "name",
          "limit"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "limit": {
            "title": "Limit",
            "type": "integer"
          },
          "remaining": {
            "title": "Remaining",
            "type": "integer"
          },
          "used": {
            "title": "Used",
            "type": "integer"
          },
          "region": {
            "title": "Region",
            "type": "string"
          },
          "provider": {
            "title": "Provider",
            "type": "string"
          }
        },
        "description": "A quota progress response"
      },
      "Region": {
        "title": "Region",
        "required": [
          "provider",
          "name",
          "location",
          "region"
        ],
        "type": "object",
        "properties": {
          "mod_count": {
            "title": "Mod Count",
            "type": "string"
          },
          "active": {
            "title": "Active",
            "type": "string"
          },
          "updated_on": {
            "title": "Updated On",
            "type": "string"
          },
          "default": {
            "title": "Default",
            "type": "string"
          },
          "node_type": {
            "title": "Node Type",
            "type": "string"
          },
          "provider": {
            "title": "Provider",
            "type": "string"
          },
          "created_on": {
            "title": "Created On",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "location": {
            "title": "Location",
            "type": "string"
          },
          "region": {
            "title": "Region",
            "type": "string"
          },
          "api_handle": {
            "title": "Api Handle",
            "type": "string"
          },
          "trial_tier_supported": {
            "title": "Trial Tier Supported",
            "type": "string"
          }
        },
        "description": "Geographic region, as defined by the providers"
      },
      "ServiceActions": {
        "title": "ServiceActions",
        "enum": [
          "Start",
          "Stop"
        ],
        "description": "Actions that can be taken on a services in a Task"
      },
      "ServiceIn": {
        "title": "ServiceIn",
        "required": [
          "name",
          "provider",
          "region",
          "release_version",
          "replicas",
          "size",
          "tier",
          "topology",
          "tx_storage"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "minLength": 1,
            "type": "string"
          },
          "maxscale_config": {
            "title": "Maxscale Config",
            "type": "string"
          },
          "maxscale_proxy": {
            "title": "Maxscale Proxy",
            "type": "string"
          },
          "monitor": {
            "title": "Monitor",
            "type": "string"
          },
          "provider": {
            "title": "Provider",
            "enum": [
              "Amazon AWS",
              "Google Cloud"
            ],
            "type": "string"
          },
          "region": {
            "title": "Region",
            "minLength": 1,
            "type": "string"
          },
          "release_version": {
            "title": "Release Version",
            "minLength": 1,
            "type": "string"
          },
          "repl_region": {
            "title": "Repl Region",
            "type": "string"
          },
          "replicas": {
            "title": "Replicas",
            "minLength": 1,
            "type": "string"
          },
          "size": {
            "title": "Size",
            "minLength": 1,
            "type": "string"
          },
          "tier": {
            "title": "Tier",
            "enum": [
              "Foundation",
              "Power"
            ],
            "type": "string"
          },
          "topology": {
            "title": "Topology",
            "enum": [
              "Standalone",
              "Primary/Replica",
              "Xpand",
              "ColumnStore (Single Node)",
              "ColumnStore"
            ],
            "type": "string"
          },
          "tx_storage": {
            "title": "Tx Storage",
            "minLength": 1,
            "type": "string"
          },
          "volume_iops": {
            "title": "Volume Iops",
            "type": "string"
          },
          "volume_type": {
            "title": "Volume Type",
            "enum": [
              "gp2",
              "gp3",
              "io1",
              "io2",
              ""
            ],
            "type": "string"
          },
          "ssl_tls": {
            "title": "Ssl Tls",
            "enum": [
              "Enabled",
              "Disabled",
              ""
            ],
            "type": "string"
          }
        },
        "description": "Request body to create a new MariaDB services deployed by SkySQL"
      },
      "ServiceOut": {
        "title": "ServiceOut",
        "required": [
          "install_status",
          "operational_status"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "maxscale_config": {
            "title": "Maxscale Config",
            "type": "string"
          },
          "maxscale_proxy": {
            "title": "Maxscale Proxy",
            "type": "string"
          },
          "monitor": {
            "title": "Monitor",
            "type": "string"
          },
          "provider": {
            "title": "Provider",
            "type": "string"
          },
          "region": {
            "title": "Region",
            "type": "string"
          },
          "release_version": {
            "title": "Release Version",
            "type": "string"
          },
          "repl_region": {
            "title": "Repl Region",
            "type": "string"
          },
          "replicas": {
            "title": "Replicas",
            "type": "string"
          },
          "size": {
            "title": "Size",
            "type": "string"
          },
          "tier": {
            "title": "Tier",
            "type": "string"
          },
          "topology": {
            "title": "Topology",
            "type": "string"
          },
          "tx_storage": {
            "title": "Tx Storage",
            "type": "string"
          },
          "volume_iops": {
            "title": "Volume Iops",
            "type": "string"
          },
          "volume_type": {
            "title": "Volume Type",
            "enum": [
              "gp2",
              "gp3",
              "io1",
              "io2",
              ""
            ],
            "type": "string"
          },
          "ssl_tls": {
            "title": "Ssl Tls",
            "enum": [
              "Enabled",
              "Disabled",
              ""
            ],
            "type": "string"
          },
          "owned_by": {
            "title": "Owned By",
            "type": "string"
          },
          "active_replicas": {
            "title": "Active Replicas",
            "type": "string"
          },
          "bulkdata_port_1": {
            "title": "Bulkdata Port 1",
            "type": "string"
          },
          "bulkdata_port_2": {
            "title": "Bulkdata Port 2",
            "type": "string"
          },
          "cluster": {
            "title": "Cluster",
            "type": "string"
          },
          "columnstore_bucket": {
            "title": "Columnstore Bucket",
            "type": "string"
          },
          "custom_config": {
            "title": "Custom Config",
            "type": "string"
          },
          "dns_domain": {
            "title": "Dns Domain",
            "type": "string"
          },
          "fault_count": {
            "title": "Fault Count",
            "type": "string"
          },
          "fqdn": {
            "title": "Fqdn",
            "type": "string"
          },
          "gl_account": {
            "title": "Gl Account",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "type": "string"
          },
          "install_status": {
            "title": "Install Status",
            "type": "string"
          },
          "instance_state": {
            "title": "Instance State",
            "type": "string"
          },
          "ip_address": {
            "title": "Ip Address",
            "type": "string"
          },
          "mac_address": {
            "title": "Mac Address",
            "type": "string"
          },
          "number": {
            "title": "Number",
            "type": "string"
          },
          "operational_status": {
            "title": "Operational Status",
            "type": "string"
          },
          "proxy": {
            "title": "Proxy",
            "type": "string"
          },
          "read_only_port": {
            "title": "Read Only Port",
            "type": "string"
          },
          "read_write_port": {
            "title": "Read Write Port",
            "type": "string"
          },
          "repl_master_host_ext": {
            "title": "Repl Master Host Ext",
            "type": "string"
          },
          "repl_master": {
            "title": "Repl Master",
            "type": "string"
          },
          "replication_status": {
            "title": "Replication Status",
            "type": "string"
          },
          "replication_type": {
            "title": "Replication Type",
            "type": "string"
          },
          "skip_sync": {
            "title": "Skip Sync",
            "type": "string"
          },
          "ssl_certificate": {
            "title": "Ssl Certificate",
            "type": "string"
          },
          "ssl_expires_on": {
            "title": "Ssl Expires On",
            "type": "string"
          },
          "ssl_serial": {
            "title": "Ssl Serial",
            "type": "string"
          },
          "created_by": {
            "title": "Created By",
            "type": "string"
          },
          "created_on": {
            "title": "Created On",
            "type": "string"
          },
          "mod_count": {
            "title": "Mod Count",
            "type": "string"
          },
          "updated_by": {
            "title": "Updated By",
            "type": "string"
          },
          "updated_on": {
            "title": "Updated On",
            "type": "string"
          }
        },
        "description": "MariaDB services deployed by SkySQL"
      },
      "ServiceStatus": {
        "title": "ServiceStatus",
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "title": "Status",
            "type": "string"
          }
        },
        "description": "Response body for a services status"
      },
      "ServiceStatusUpdate": {
        "title": "ServiceStatusUpdate",
        "required": [
          "action"
        ],
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/ServiceActions"
          }
        },
        "description": "Request body to update a service"
      },
      "ServiceUpdate": {
        "title": "ServiceUpdate",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "minLength": 1,
            "type": "string"
          }
        },
        "description": "Request body to update a services - currently limited to name only"
      },
      "Size": {
        "title": "Size",
        "required": [
          "product",
          "visibility",
          "cpu",
          "component",
          "tier",
          "provider",
          "name",
          "node_pool",
          "value",
          "ram"
        ],
        "type": "object",
        "properties": {
          "product": {
            "title": "Product",
            "type": "string"
          },
          "visibility": {
            "title": "Visibility",
            "type": "string"
          },
          "mod_count": {
            "title": "Mod Count",
            "type": "string"
          },
          "active": {
            "title": "Active",
            "type": "string"
          },
          "cpu": {
            "title": "Cpu",
            "type": "string"
          },
          "updated_on": {
            "title": "Updated On",
            "type": "string"
          },
          "sequence": {
            "title": "Sequence",
            "type": "string"
          },
          "component": {
            "title": "Component",
            "type": "string"
          },
          "tier": {
            "title": "Tier",
            "type": "string"
          },
          "provider": {
            "title": "Provider",
            "type": "string"
          },
          "created_on": {
            "title": "Created On",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "node_pool": {
            "title": "Node Pool",
            "type": "string"
          },
          "value": {
            "title": "Value",
            "type": "string"
          },
          "api_handle": {
            "title": "Api Handle",
            "type": "string"
          },
          "ram": {
            "title": "Ram",
            "type": "string"
          }
        },
        "description": "Node size, as defined by the providers"
      },
      "TierResponse": {
        "title": "TierResponse",
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "paid": {
            "title": "Paid",
            "type": "string"
          }
        },
        "description": "Availability tier, e.g. Power, Foundation, etc."
      },
      "TopologyResponse": {
        "title": "TopologyResponse",
        "required": [
          "product",
          "name"
        ],
        "type": "object",
        "properties": {
          "maxscale_supported": {
            "title": "Maxscale Supported",
            "type": "string"
          },
          "product": {
            "title": "Product",
            "type": "string"
          },
          "replica_options": {
            "title": "Replica Options",
            "type": "string"
          },
          "replica_label": {
            "title": "Replica Label",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "active": {
            "title": "Active",
            "type": "string"
          }
        },
        "description": "Cluster topology valid for a particular product, e.g. Standalone or MaxScale"
      },
      "UnmetExpectationDetail": {
        "title": "UnmetExpectationDetail",
        "required": [
          "detail"
        ],
        "type": "object",
        "properties": {
          "detail": {
            "$ref": "#/components/schemas/UnmetExpectationMessage"
          }
        },
        "description": "Message details containing unmet expectations from failed specs"
      },
      "UnmetExpectationMessage": {
        "title": "UnmetExpectationMessage",
        "required": [
          "description"
        ],
        "type": "object",
        "properties": {
          "description": {
            "title": "Description",
            "type": "string"
          },
          "unmet_expectations": {
            "title": "Unmet Expectations",
            "type": "string",
            "default": "..."
          }
        },
        "description": "Message body with details regarding failed specifications"
      },
      "UpdateConfigurationRequest": {
        "title": "UpdateConfigurationRequest",
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "config_json": {
            "title": "Config Json",
            "type": "object",
            "default": {}
          }
        },
        "description": "Request body to update a configuration"
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      },
      "Version": {
        "title": "Version",
        "type": "object",
        "properties": {
          "product": {
            "title": "Product",
            "type": "string"
          },
          "mod_count": {
            "title": "Mod Count",
            "type": "string"
          },
          "updated_on": {
            "title": "Updated On",
            "type": "string"
          },
          "display_name": {
            "title": "Display Name",
            "type": "string"
          },
          "type": {
            "title": "Type",
            "type": "string"
          },
          "enterprise_version": {
            "title": "Enterprise Version",
            "type": "string"
          },
          "release_notes_url": {
            "title": "Release Notes Url",
            "type": "string"
          },
          "public": {
            "title": "Public",
            "type": "string"
          },
          "provider": {
            "title": "Provider",
            "type": "string"
          },
          "release_date": {
            "title": "Release Date",
            "type": "string"
          },
          "created_on": {
            "title": "Created On",
            "type": "string"
          },
          "parent_release": {
            "title": "Parent Release",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          }
        },
        "description": "Database version, e.g. 10.4 or 10.5"
      }
    },
    "securitySchemes": {
      "HTTPBearer": {
        "type": "http",
        "description": "\n- Generate an [API key from MariaDB ID](https://id-dev.mariadb.com/account/api)\n\n- Use the API key to generate a short lived token\n    ```\n    curl \\\n        --location \\\n        --request POST \\\n        --header \"Authorization: Token REDACTED\" \\\n        --header \"Content-length: 0\" \\\n        'https://id-dev.mariadb.com/api/v1/token/'\n    ```\n\n- Use the `token` field from the response in the _Authorization_ header for `Bearer` auth in subsequent api requests.\n",
        "scheme": "bearer"
      }
    }
  }
}
